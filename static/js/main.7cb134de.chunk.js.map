{"version":3,"sources":["components/index.js","features/wordle/wordleSlice.js","store/index.js","App.js","index.js"],"names":["Letter","letter","color","style","backgroundColor","className","Line","letters","colors","map","index","Map","set","wordleSlice","createSlice","name","reducers","addLetter","state","action","userInput","length","payload","match","toUpperCase","removeLetter","value","pop","nextLevel","isGameOver","level","userWord","guessedWord","result","i","includes","get","compareWordsAnfGetColors","userWords","userColors","addUserWord","join","status","initGame","wizardWords","Math","floor","random","emptyWord","Array","fill","words","push","initialState","actions","getColorForWord","configureStore","reducer","wordle","wordleReducer","fillArrayByEmptyString","inputArray","Main","dispatch","useDispatch","useSelector","guessed","input","handle","useCallback","event","key","useEffect","window","addEventListener","removeEventListener","alert","_","App","store","rootElement","document","getElementById","createRoot","render"],"mappings":"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","file":"static/js/main.7cb134de.chunk.js","sourcesContent":["const Letter = ({ letter, color = \"transparent\" }) => (\n  <div style={{ backgroundColor: color }} className=\"letter\">\n    {letter}\n  </div>\n);\n\nconst Line = ({ letters, colors }) => {\n  return (\n    <div className=\"line\">\n      {letters.map((letter, index) => (\n        <Letter key={index} letter={letter} color={colors[index]} />\n      ))}\n    </div>\n  );\n};\n\nexport { Letter, Line };\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nconst TOTAL_LEVELS = 6;\nconst MAX_LENGTH_WORD = 5;\nconst colors = new Map();\ncolors.set(\"outofplace\", \"orange\");\ncolors.set(\"absent\", \"lightgrey\");\ncolors.set(\"correct\", \"lightgreen\");\n\nfunction compareWordsAnfGetColors(userWord, guessedWord) {\n  const result = [];\n  for (let i = 0; i < MAX_LENGTH_WORD; i++) {\n    if (userWord[i] === guessedWord[i]) {\n      result[i] = colors.get(\"correct\");\n      continue;\n    }\n    if (userWord.includes(guessedWord[i])) {\n      result[i] = colors.get(\"outofplace\");\n    } else {\n      result[i] = colors.get(\"absent\");\n    }\n  }\n  return result;\n}\n\nexport const wordleSlice = createSlice({\n  name: \"wordle\",\n  reducers: {\n    addLetter(state, action) {\n      if (\n        state.userInput.length < MAX_LENGTH_WORD &&\n        action.payload.match(/[а-я]/gi)\n      ) {\n        state.userInput = [...state.userInput, action.payload.toUpperCase()];\n      }\n    },\n    removeLetter(state) {\n      const value = state.userInput;\n      value.pop();\n      state.userInput = value;\n    },\n    nextLevel(state) {\n      if (state.isGameOver) {\n        return;\n      }\n      if (state.level < TOTAL_LEVELS) {\n        const userWord = state.userWords[state.level];\n        const colors = compareWordsAnfGetColors(userWord, state.guessedWord);\n        state.colors = colors;\n        state.userColors[state.level] = colors;\n\n        state.level = state.level + 1;\n      }\n      state.colors = [];\n    },\n    addUserWord(state) {\n      if (state.userInput.length < MAX_LENGTH_WORD) {\n        return;\n      }\n      if (state.userInput.join(\"\") === state.guessedWord) {\n        state.isGameOver = true;\n        state.status = \"WIN\";\n        return;\n      }\n      state.userWords[state.level] = [...state.userInput];\n      state.userInput = [];\n    },\n    initGame(state) {\n      state.guessedWord = state.wizardWords[\n        Math.floor(Math.random() * state.wizardWords.length)\n      ].toUpperCase();\n      state.level = 0;\n      state.userInput = \"\";\n      state.isGameOver = false;\n      const emptyWord = new Array(MAX_LENGTH_WORD).fill(\"\");\n      const words = [];\n      const colors = [];\n      for (let i = 0; i < TOTAL_LEVELS; i++) {\n        words.push(emptyWord);\n        colors.push([]);\n      }\n      state.colors = [];\n      state.userColors = colors;\n      state.userWords = words;\n    }\n  },\n  initialState: {\n    colors: [],\n    guessedWord: \"\",\n    userInput: [],\n    level: 0,\n    isGameOver: false,\n    userWords: [],\n    userColors: [],\n    status: \"LOOSE\",\n    wizardWords: [\n      \"палка\",\n      \"сосна\",\n      \"крупа\",\n      \"блажь\",\n      \"народ\",\n      \"помпа\",\n      \"карта\",\n      \"парад\",\n      \"марка\",\n      \"трава\",\n      \"калач\"\n    ]\n  }\n});\n\nexport const {\n  addLetter,\n  nextLevel,\n  removeLetter,\n  initGame,\n  addUserWord,\n  getColorForWord\n} = wordleSlice.actions;\n\nexport default wordleSlice.reducer;\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport wordleReducer from \"../features/wordle/wordleSlice\";\n\nexport default configureStore({\n  reducer: {\n    wordle: wordleReducer\n  }\n});\n","import React, { useEffect, useCallback } from \"react\";\nimport { Line } from \"./components\";\nimport { Provider, useSelector, useDispatch } from \"react-redux\";\nimport {\n  addLetter,\n  nextLevel,\n  removeLetter,\n  initGame,\n  addUserWord\n} from \"./features/wordle/wordleSlice\";\nimport store from \"./store\";\nimport \"./styles.css\";\n\nconst BLANK_WORD_ARRAY = new Array(5).fill(\"\");\nconst WORD_LENGTH = 5;\n\nconst fillArrayByEmptyString = (inputArray) => {\n  const result = [];\n  for (let i = 0; i < WORD_LENGTH; i++) {\n    result.push(inputArray[i] || \"\");\n  }\n  return result;\n};\n\nfunction Main() {\n  const dispatch = useDispatch();\n  const level = useSelector((state) => state.wordle.level);\n  const guessed = useSelector((state) => state.wordle.guessedWord);\n  const input = useSelector((state) => state.wordle.userInput);\n  const userWords = useSelector((state) => state.wordle.userWords);\n  const isGameOver = useSelector((state) => state.wordle.isGameOver);\n  const colors = useSelector((state) => state.wordle.colors);\n  const userColors = useSelector((state) => state.wordle.userColors);\n  const status = useSelector((state) => state.wordle.status);\n\n  const handle = useCallback(\n    (event) => {\n      if (event.key === \"Enter\") {\n        dispatch(addUserWord());\n        dispatch(nextLevel());\n        return;\n      }\n      if (event.key === \"Backspace\") {\n        dispatch(removeLetter());\n      } else {\n        dispatch(addLetter(event.key));\n      }\n    },\n    [dispatch]\n  );\n\n  useEffect(() => {\n    dispatch(initGame());\n    window.addEventListener(\"keyup\", handle, false);\n    return () => window.removeEventListener(\"keyup\", handle);\n  }, [handle, dispatch]);\n\n  useEffect(() => {\n    if (isGameOver) {\n      alert(\"YOU \" + status + \" !\");\n      dispatch(initGame());\n    }\n  }, [isGameOver, dispatch, status]);\n\n  return (\n    <>\n      <p>Level: {level}</p>\n      <p>User input: {input}</p>\n      <p>Guessed: {guessed}</p>\n      <p>Is game over? {isGameOver + \"\"}</p>\n      <div className=\"conatiner\">\n        {userWords.map((_, index) => {\n          return (\n            <Line\n              key={index}\n              colors={level === index ? colors : userColors[index]}\n              letters={\n                level === index\n                  ? fillArrayByEmptyString(input)\n                  : userWords[index]\n              }\n            />\n          );\n        })}\n      </div>\n    </>\n  );\n}\n\nexport default function App() {\n  return (\n    <Provider store={store}>\n      <Main />\n    </Provider>\n  );\n}\n","import { StrictMode } from \"react\";\nimport { createRoot } from \"react-dom/client\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\n\nroot.render(\n  <StrictMode>\n    <App />\n  </StrictMode>\n);\n"],"sourceRoot":""}